/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    readonly "/pet": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Update an existing pet.
         * @description Update an existing pet by Id.
         */
        readonly put: operations["updatePet"];
        /**
         * Add a new pet to the store.
         * @description Add a new pet to the store.
         */
        readonly post: operations["addPet"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/pet/findByStatus": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Finds Pets by status.
         * @description Multiple status values can be provided with comma separated strings.
         */
        readonly get: operations["findPetsByStatus"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/pet/findByTags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Finds Pets by tags.
         * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         */
        readonly get: operations["findPetsByTags"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/pet/{petId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Find pet by ID.
         * @description Returns a single pet.
         */
        readonly get: operations["getPetById"];
        readonly put?: never;
        /**
         * Updates a pet in the store with form data.
         * @description Updates a pet resource based on the form data.
         */
        readonly post: operations["updatePetWithForm"];
        /**
         * Deletes a pet.
         * @description Delete a pet.
         */
        readonly delete: operations["deletePet"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/pet/{petId}/uploadImage": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Uploads an image.
         * @description Upload image of the pet.
         */
        readonly post: operations["uploadFile"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/store/inventory": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Returns pet inventories by status.
         * @description Returns a map of status codes to quantities.
         */
        readonly get: operations["getInventory"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/store/order": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Place an order for a pet.
         * @description Place a new order in the store.
         */
        readonly post: operations["placeOrder"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/store/order/{orderId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Find purchase order by ID.
         * @description For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
         */
        readonly get: operations["getOrderById"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete purchase order by identifier.
         * @description For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
         */
        readonly delete: operations["deleteOrder"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Create user.
         * @description This can only be done by the logged in user.
         */
        readonly post: operations["createUser"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/createWithList": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Creates list of users with given input array.
         * @description Creates list of users with given input array.
         */
        readonly post: operations["createUsersWithListInput"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/login": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Logs user into the system.
         * @description Log into the system.
         */
        readonly get: operations["loginUser"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/logout": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Logs out current logged in user session.
         * @description Log user out of the system.
         */
        readonly get: operations["logoutUser"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/{username}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get user by user name.
         * @description Get user detail based on username.
         */
        readonly get: operations["getUserByName"];
        /**
         * Update user resource.
         * @description This can only be done by the logged in user.
         */
        readonly put: operations["updateUser"];
        readonly post?: never;
        /**
         * Delete user resource.
         * @description This can only be done by the logged in user.
         */
        readonly delete: operations["deleteUser"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        readonly Order: {
            /**
             * Format: int64
             * @example 10
             */
            readonly id?: number;
            /**
             * Format: int64
             * @example 198772
             */
            readonly petId?: number;
            /**
             * Format: int32
             * @example 7
             */
            readonly quantity?: number;
            /** Format: date-time */
            readonly shipDate?: string;
            /**
             * @description Order Status
             * @example approved
             * @enum {string}
             */
            readonly status?: "placed" | "approved" | "delivered";
            readonly complete?: boolean;
        };
        readonly Category: {
            /**
             * Format: int64
             * @example 1
             */
            readonly id?: number;
            /** @example Dogs */
            readonly name?: string;
        };
        readonly User: {
            /**
             * Format: int64
             * @example 10
             */
            readonly id?: number;
            /** @example theUser */
            readonly username?: string;
            /** @example John */
            readonly firstName?: string;
            /** @example James */
            readonly lastName?: string;
            /** @example john@email.com */
            readonly email?: string;
            /** @example 12345 */
            readonly password?: string;
            /** @example 12345 */
            readonly phone?: string;
            /**
             * Format: int32
             * @description User Status
             * @example 1
             */
            readonly userStatus?: number;
        };
        readonly Tag: {
            /** Format: int64 */
            readonly id?: number;
            readonly name?: string;
        };
        readonly Pet: {
            /**
             * Format: int64
             * @example 10
             */
            readonly id?: number;
            /** @example doggie */
            readonly name: string;
            readonly category?: components["schemas"]["Category"];
            readonly photoUrls: readonly string[];
            readonly tags?: readonly components["schemas"]["Tag"][];
            /**
             * @description pet status in the store
             * @enum {string}
             */
            readonly status?: "available" | "pending" | "sold";
        };
        readonly ApiResponse: {
            /** Format: int32 */
            readonly code?: number;
            readonly type?: string;
            readonly message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description Pet object that needs to be added to the store */
        readonly Pet: {
            readonly content: {
                readonly "application/json": components["schemas"]["Pet"];
                readonly "application/xml": components["schemas"]["Pet"];
            };
        };
        /** @description List of user object */
        readonly UserArray: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["User"][];
            };
        };
    };
    headers: never;
    pathItems: never;
};
export type SchemaOrder = components['schemas']['Order'];
export type SchemaCategory = components['schemas']['Category'];
export type SchemaUser = components['schemas']['User'];
export type SchemaTag = components['schemas']['Tag'];
export type SchemaPet = components['schemas']['Pet'];
export type SchemaApiResponse = components['schemas']['ApiResponse'];
export type RequestBodyPet = components['requestBodies']['Pet'];
export type RequestBodyUserArray = components['requestBodies']['UserArray'];
export type $defs = Record<string, never>;
export interface operations {
    readonly updatePet: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description Update an existent pet in the store */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["Pet"];
                readonly "application/xml": components["schemas"]["Pet"];
                readonly "application/x-www-form-urlencoded": components["schemas"]["Pet"];
            };
        };
        readonly responses: {
            /** @description Successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Pet"];
                    readonly "application/xml": components["schemas"]["Pet"];
                };
            };
            /** @description Invalid ID supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pet not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation exception */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly addPet: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description Create a new pet in the store */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["Pet"];
                readonly "application/xml": components["schemas"]["Pet"];
                readonly "application/x-www-form-urlencoded": components["schemas"]["Pet"];
            };
        };
        readonly responses: {
            /** @description Successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Pet"];
                    readonly "application/xml": components["schemas"]["Pet"];
                };
            };
            /** @description Invalid input */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation exception */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly findPetsByStatus: {
        readonly parameters: {
            readonly query?: {
                /** @description Status values that need to be considered for filter */
                readonly status?: "available" | "pending" | "sold";
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Pet"][];
                    readonly "application/xml": readonly components["schemas"]["Pet"][];
                };
            };
            /** @description Invalid status value */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly findPetsByTags: {
        readonly parameters: {
            readonly query?: {
                /** @description Tags to filter by */
                readonly tags?: readonly string[];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Pet"][];
                    readonly "application/xml": readonly components["schemas"]["Pet"][];
                };
            };
            /** @description Invalid tag value */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getPetById: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of pet to return */
                readonly petId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Pet"];
                    readonly "application/xml": components["schemas"]["Pet"];
                };
            };
            /** @description Invalid ID supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pet not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updatePetWithForm: {
        readonly parameters: {
            readonly query?: {
                /** @description Name of pet that needs to be updated */
                readonly name?: string;
                /** @description Status of pet that needs to be updated */
                readonly status?: string;
            };
            readonly header?: never;
            readonly path: {
                /** @description ID of pet that needs to be updated */
                readonly petId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Pet"];
                    readonly "application/xml": components["schemas"]["Pet"];
                };
            };
            /** @description Invalid input */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deletePet: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly api_key?: string;
            };
            readonly path: {
                /** @description Pet id to delete */
                readonly petId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Pet deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid pet value */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly uploadFile: {
        readonly parameters: {
            readonly query?: {
                /** @description Additional Metadata */
                readonly additionalMetadata?: string;
            };
            readonly header?: never;
            readonly path: {
                /** @description ID of pet to update */
                readonly petId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/octet-stream": string;
            };
        };
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ApiResponse"];
                };
            };
            /** @description No file uploaded */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pet not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getInventory: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly [key: string]: number;
                    };
                };
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly placeOrder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Order"];
                readonly "application/xml": components["schemas"]["Order"];
                readonly "application/x-www-form-urlencoded": components["schemas"]["Order"];
            };
        };
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Invalid input */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation exception */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getOrderById: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of order that needs to be fetched */
                readonly orderId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Order"];
                    readonly "application/xml": components["schemas"]["Order"];
                };
            };
            /** @description Invalid ID supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteOrder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the order that needs to be deleted */
                readonly orderId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description order deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid ID supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly createUser: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description Created user object */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["User"];
                readonly "application/xml": components["schemas"]["User"];
                readonly "application/x-www-form-urlencoded": components["schemas"]["User"];
            };
        };
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["User"];
                    readonly "application/xml": components["schemas"]["User"];
                };
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly createUsersWithListInput: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["User"][];
            };
        };
        readonly responses: {
            /** @description Successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["User"];
                    readonly "application/xml": components["schemas"]["User"];
                };
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly loginUser: {
        readonly parameters: {
            readonly query?: {
                /** @description The user name for login */
                readonly username?: string;
                /** @description The password for login in clear text */
                readonly password?: string;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    /** @description calls per hour allowed by the user */
                    readonly "X-Rate-Limit"?: number;
                    /** @description date in UTC when token expires */
                    readonly "X-Expires-After"?: string;
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/xml": string;
                    readonly "application/json": string;
                };
            };
            /** @description Invalid username/password supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly logoutUser: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getUserByName: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The name that needs to be fetched. Use user1 for testing */
                readonly username: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["User"];
                    readonly "application/xml": components["schemas"]["User"];
                };
            };
            /** @description Invalid username supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updateUser: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description name that need to be deleted */
                readonly username: string;
            };
            readonly cookie?: never;
        };
        /** @description Update an existent user in the store */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["User"];
                readonly "application/xml": components["schemas"]["User"];
                readonly "application/x-www-form-urlencoded": components["schemas"]["User"];
            };
        };
        readonly responses: {
            /** @description successful operation */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description user not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteUser: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The name that needs to be deleted */
                readonly username: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description User deleted */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid username supplied */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            readonly default: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
